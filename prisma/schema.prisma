datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  email        String        @unique
  groups       GroupUser[]   @relation("UserGroups")  // Join table
  messages     Message[]
  permissions  Permission[]  // Add this line for the missing relation
}

model Group {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  admins      GroupUser[]  @relation("GroupAdmins")  // Join table with relation name
  members     GroupUser[]  @relation("GroupMembers")  // Join table with relation name
  permissions Permission[]
  messages    Message[]    @relation("GroupMessages") // Add this line for the missing relation
}

model GroupUser {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String
  userId    String
  user      User     @relation("UserGroups", fields: [userId], references: [id])
  group     Group    @relation("GroupMembers", fields: [groupId], references: [id])
  groupAdmin Group   @relation("GroupAdmins", fields: [groupId], references: [id]) // Add this line for the missing relation
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  senderId  String
  sender    User      @relation(fields: [senderId], references: [id])
  groupId   String?
  group     Group?    @relation("GroupMessages", fields: [groupId], references: [id])
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  groupId   String
  group     Group    @relation(fields: [groupId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  canRead   Boolean
  canWrite  Boolean
  isAdmin   Boolean
}
